# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 10;

# Then I wanted to see the top ten danceable songs with a tempo equal to or above 150
SELECT artist_name, track_name, 
danceability, tempo
FROM Spotifydata
WHERE tempo >=150
ORDER BY danceability DESC
LIMIT 10;

#Next I wanted to see the average loudness, tempo, and song duration for the top ten most popular songs
SELECT
AVG(loudness) as avg_loudness,AVG(tempo) as avg_tempo, AVG(duration_ms) as avg_duration_ms
FROM Spotifydata
WHERE popularity IN(SELECT popularity
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 10);

#Then I used CASE to assign a readable label to the popularity score of each track
SELECT artist_name,track_name, 

CASE
WHEN popularity >90 THEN 'Most Popular'
WHEN popularity >80 THEN 'Very Popular'
WHEN popularity >70 THEN 'Moderately Popular'
ELSE 'Rising in Popularity'
END as 'Popularity_Score'

FROM Spotifydata
GROUP BY Popularity
ORDER BY popularity DESC;
